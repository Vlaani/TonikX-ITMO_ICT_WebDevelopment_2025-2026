{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!","text":"<p>\u042d\u0442\u043e \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u0430\u0439\u0442\u0430 \u0441 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u043c\u0438 \u043f\u043e \u0432\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435.</p>"},{"location":"report_1/","title":"\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0410\u043d\u0438\u0441\u0438\u043c\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u041a3340</p>"},{"location":"report_1/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:  - \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.  - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</p>"},{"location":"report_1/#_1","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f UDP \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443:  </p> <pre><code>def task_1():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.bind((\"\", port))\n    print(f'Server (udp) is listening at localhost:{port}')\n\n    while True:\n        data, client_address = sock.recvfrom(1024)\n        if not data:\n            break\n        print(f\"Recieved data (&lt;= 4 Kb): {data.decode('utf-8')}\")\n        sock.sendto(\"Hello, client!\".encode('utf-8'), client_address)\n    socket.close()\n</code></pre>"},{"location":"report_1/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:  - \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.  - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.</p>"},{"location":"report_1/#_2","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f TCP \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0430\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e json. \u0417\u0430\u0442\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443:  </p> <pre><code>def task_2():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.bind((\"\", port))\n    sock.listen(max_clients)\n    print(f'Server (tcp) is listening at localhost:{port}')\n\n    while True:\n        conn, client_address = sock.accept()\n        data = conn.recv(max_data_size)\n        if not data:\n            print(\"Connection close\")\n            conn.close()\n            break\n        print(f\"Recieved data (&lt;= {max_data_size / 1024.0} Kb) from {client_address}: {data.decode('utf-8')}\")\n        conn.send(bytes(str(solve_problem(data, client_address)).encode('utf-8')))\n    socket.close()\n</code></pre> <pre><code>if problem[\"op\"] == 1:\n        return math.sqrt(problem[\"a\"]**2 + problem[\"b\"]**2)\n    elif problem[\"op\"] == 2:\n        if problem[\"a\"] == 0:\n            if problem[\"b\"] == 0:\n                if problem[\"c\"] == 0:\n                    return \"Infinite solutions (0=0)\"\n                else:\n                    return \"No solution (c!=0)\"\n            else:\n                # Linear equation bx + c = 0\n                return -problem[\"c\"] / problem[\"b\"]\n        discriminant = (problem[\"b\"]**2) - (4 * problem[\"a\"] * problem[\"c\"])\n        if discriminant &gt; 0:\n            root1 = (-problem[\"b\"] - cmath.sqrt(discriminant)) / (2 * problem[\"a\"])\n            root2 = (-problem[\"b\"] + cmath.sqrt(discriminant)) / (2 * problem[\"a\"])\n            return root1, root2\n        elif discriminant == 0:\n            root = -problem[\"b\"] / (2 * problem[\"a\"])\n            return root\n        else:  # discriminant &lt; 0\n            root1 = (-problem[\"b\"] - cmath.sqrt(discriminant)) / (2 * problem[\"a\"])\n            root2 = (-problem[\"b\"] + cmath.sqrt(discriminant)) / (2 * problem[\"a\"])\n            return root1, root2\n    elif problem[\"op\"] == 3:\n        return (problem[\"base1\"] + problem[\"base2\"]) / 2 * problem[\"height\"]\n    elif problem[\"op\"] == 4:\n        return problem[\"base\"] * problem[\"height\"]\n\n    return \"idk...\"\n</code></pre>"},{"location":"report_1/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:  - \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</p>"},{"location":"report_1/#_3","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 3-5. \u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f TCP \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442.</p> <pre><code>def task_3():\n    server = Server()\n    server.add_route(method_type.GET, \"/\", send_html_page)\n    server.serve_forever(\"\", port, connection_type.TCP)\n</code></pre> <pre><code>def send_html_page(request):\n    file = open(\"index.html\", \"r\").read()\n    return (200, file)\n</code></pre>"},{"location":"report_1/#4","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:  - \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.  - \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.</p>"},{"location":"report_1/#_4","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 3-5. \u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f TCP \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0444\u0430\u0439\u043b\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. </p> <pre><code>def task_4():\n    server = Server()\n    server.add_route(method_type.POST, \"/join\", join_route)\n    server.add_route(method_type.POST, \"/send\", send_route)\n    server.add_route(method_type.GET, \"/login\", login_route)\n    server.add_route(method_type.GET, \"/messages\", messages_route)\n    server.add_route(method_type.GET, \"/\", default_route)\n    server.add_route(method_type.GET, \"/chat.html\", default_route)\n    server.serve_forever(\"\", port, connection_type.TCP)\n</code></pre> <pre><code>chats = {}\nusers = {}\nlock = threading.Lock()\n\ndef join_route(request):\n    args = request[\"json\"]\n    userName = args[\"userName\"]\n    user = users[userName]\n    chat_id = args[\"chat_id\"]\n    if chat_id not in chats:\n        chats[chat_id] = Chat(set(), list())\n    chats[chat_id].users.add(user)\n    user.chats.add(chat_id)\n    user.update_event.set()\n    user.new_messages[chat_id] = [] if len(chats[chat_id].messages) == 0 else [len(chats[chat_id].messages)-1]\n    return (200, f\"You successfully joined chat \\\"{chat_id}\\\"\")\n\ndef send_route(request):\n    global lock\n    args = request[\"json\"]\n    userName = args[\"userName\"]\n    user = users[userName]\n    chat_id = args[\"chat_id\"]\n    i = 0\n    with lock:\n        chats[chat_id].messages.append(Message(user.name, args[\"text\"], time.time()))\n        i = len(chats[chat_id].messages) - 1\n    for u in chats[chat_id].users:\n        if chat_id not in u.new_messages: \n            u.new_messages[chat_id] = []\n        u.new_messages[chat_id].append(i)\n        u.update_event.set()\n    r = args[\"text\"]\n    return (200, f\"You successfully sended a message in chat \\\"{chat_id}\\\"\")\n\ndef login_route(request):\n    args = request[\"args\"]\n    if \"userName\" not in args:\n        return (422, \"\")\n    userName = unquote(args[\"userName\"])\n    if userName not in users:\n        user = User(userName)\n        users[userName] = user\n    return (200, json.dumps(\"You successfully logged in\"))\n\ndef messages_route(request):\n    args = request[\"args\"]\n    result = []\n\n    if \"userName\" not in args:\n        return (422, \"\")\n    userName = unquote(args[\"userName\"])\n    if userName not in users:\n        return (401, \"Not logged in\")\n    else:\n        user = users[userName]\n\n    if \"chat_id\" not in args:\n        if \"loadAllLast\" not in args or args[\"loadAllLast\"] == \"false\":\n            if not user.update_event.is_set():\n                user.update_event.wait(timeout=30)\n                if not user.update_event.is_set():\n                    return (200, json.dumps(\"no updates\"))\n            user.update_event.clear()\n            for id, messages_ids in user.new_messages.items():\n                m_count = len(chats[id].messages)\n                if m_count != 0:\n                    messages = list(map(lambda x: chats[id].messages[x], messages_ids))\n                    result.append((id, messages, str(m_count - len(messages_ids)) + \":\" + str(m_count)))\n                else:\n                    result.append((id, [], \"0:0\"))\n            user.new_messages.clear()\n        else:\n            user.update_event.clear()\n            user.new_messages.clear()\n            for index in user.chats:\n                m_count = len(chats[index].messages)\n                if m_count != 0:\n                    result.append((index, [chats[index].messages[-1]], str(m_count - 1) + \":\" + str(m_count)))\n                else:\n                    result.append((index, [], \"0:0\"))\n\n        return (200, json.dumps(result))\n\n    cur_chat = unquote(args[\"chat_id\"])\n    start = args[\"range\"].split(':')[0]\n    end = None\n    if (len(args[\"range\"].split(':')) == 2):\n        end = args[\"range\"].split(':')[1]\n    m = chats[cur_chat].messages\n    return (200, json.dumps([(cur_chat, m[int(start):int(end)], args[\"range\"])]))\n\ndef default_route(request):\n    file = open(\"./chat.html\", \"r\").read()\n    return (200, file)\n</code></pre>"},{"location":"report_1/#5","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p>"},{"location":"report_1/#_5","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 3-5. \u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f TCP \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0432\u044b\u0434\u0430\u0451\u0442 \u0441\u043f\u0438\u0441\u043a\u0438 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0444\u0430\u0439\u043b\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. </p> <pre><code>def task_5():\n    server = Server()\n    server.add_route(method_type.POST, \"/add\", add_route)\n    server.add_route(method_type.GET, \"/get\", get_route)\n    server.add_route(method_type.GET, \"/\", get_table_route)\n    server.add_route(method_type.GET, \"/chat.html\", get_table_route)\n    server.serve_forever(\"\", port, connection_type.TCP)\n</code></pre> <pre><code>grades = {}\n\ndef add_route(request):\n    args = request[\"json\"]\n    global grades\n    subject = args[\"subject\"]\n    if subject not in grades:\n        grades[subject] = []\n    grades[subject].append(int(args[\"grade\"]))\n    return (200, \"Successfully added\")\n\ndef get_route(request):\n    global grades\n    return (200, json.dumps(grades))\n\ndef get_table_route(request):\n    file = open(\"./table.html\", \"r\").read()\n    return (200, file)\n</code></pre> <p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <pre><code>import socket\nimport json\nimport threading\nfrom enum import Enum\n\nclass connection_type(Enum):\n    UDP = 1\n    TCP = 2\n\nclass method_type(Enum):\n    GET = 1\n    POST = 2\n    PUT = 3\n\nport = 9090\nmax_clients = 10\nmax_data_size = 4 * 1024\n\nclass Server:\n    clients = {}\n    routes = {\"GET\" : {},\n              \"PUT\" : {},\n              \"POST\" : {}}\n\n    def serve_forever(self, host : str, port : int, conn_type : connection_type):\n        try:\n            self.conn_type = conn_type\n            if conn_type == connection_type.UDP:\n                self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                self.sock.bind((host, port))\n                print(f'Server (UDP) is listening at port {port}')\n            elif conn_type == connection_type.TCP:\n                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.sock.bind((host, port))\n                self.sock.listen(max_clients)\n                print(f'Server (TCP) is listening at port {port}')\n            self.serve_clients()\n        except Exception:\n            print(Exception)\n        return self\n\n    def serve_clients(self):\n        while True:\n            if self.conn_type == connection_type.UDP:\n                while True:\n                    data, client_address = self.sock.recvfrom(max_data_size)\n                    if not data:\n                        break\n                    threading.Thread(target=self.handle_request, args=(data, client_address,)).start()\n            elif self.conn_type == connection_type.TCP:\n                conn, client_address = self.sock.accept()\n                self.clients[client_address] = conn\n                print(f\"New connection {conn}\")\n                threading.Thread(target=self.handle_request, args=(conn, client_address,)).start()\n\n    def handle_request(self, conn, client_address):\n        if self.conn_type == connection_type.UDP:\n            code, message = self.parse_request(conn, client_address)\n            self.sock.sendto(bytes(str(self.create_response(code, message)).encode('utf-8')), client_address)\n        elif self.conn_type == connection_type.TCP:\n            while True:\n                data = conn.recv(max_data_size)\n                if not data:\n                    print(\"Connection close\")\n                    conn.close()\n                    break\n                code, message = self.parse_request(data, client_address)\n                conn.send(bytes(str(self.create_response(code, message)).encode('utf-8')))\n\n    def parse_request(self, data, client_address):\n        out = {}\n        out[\"client_address\"] = client_address\n        _data = data.decode('utf-8')\n        lines = _data.split('\\r\\n')\n        print(f\"Recieved data (&lt;= {max_data_size / 1024.0} Kb) from {client_address}: {data.decode('utf-8')}\")\n        if len(_data) == 0:\n            return \"\"\n        method, path, _ = lines[0].split(' ')\n        method = method.strip()\n        args = \"\"\n        if '?' in path:\n            path, args = path.strip().split('?')\n        out[\"path\"] = path\n\n        if method == 'POST':\n            out[\"method\"] = method_type.POST\n            body = str(lines[-1]).strip()\n            out[\"body\"] = body\n            if body.startswith(\"{\"):\n                out[\"json\"] = json.loads(body)\n        elif method == 'GET':\n            out[\"method\"] = method_type.GET\n            if args:\n                args_dict = {}\n                for arg in args.split(\"&amp;\"):\n                    key, val = arg.split(\"=\")\n                    args_dict[key] = val\n                out[\"args\"] = args_dict\n\n        if out[\"method\"] not in self.routes or out[\"path\"] not in self.routes[out[\"method\"]]:\n            return (404, \"Resource not found\")\n\n        return self.routes[out[\"method\"]][out[\"path\"]](out)\n\n    def create_response(self, code, body):\n        length = len(body.encode('utf-8'))\n        return f\"HTTP/1.1 {code} OK\\nContent-Type: application/json,text/html; charset=utf-8\\nConnection: keep-alive\\nAccess-Control-Allow-Origin: *\\nContent-Length: {length}\\n\\n\" + body\n\n    def add_route(self, method : method_type, route : str, handler):\n        if method not in self.routes:\n            self.routes[method] = {}\n        self.routes[method][route] = handler\n</code></pre>"},{"location":"report_2/","title":"\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0410\u043d\u0438\u0441\u0438\u043c\u043e\u0432 \u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u041a3340   </p>"},{"location":"report_2/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<ol> <li> <p>\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f:  \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:   </p> </li> <li> <p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</p> </li> <li>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f).</li> <li>\u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435.</li> <li>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin.</li> <li>\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.</li> </ol>"},{"location":"report_2/#_2","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c 2 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0434\u043b\u044f \u0430\u0443\u043d\u0442\u0435\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445   </p>"},{"location":"report_2/#url","title":"\u041f\u0440\u043e\u043f\u0438\u0448\u0435\u043c url:","text":"<ul> <li>\u0414\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> </ul> <pre><code>urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('accounts.urls')),\n    path('', include('main.urls')),\n]\n</code></pre> <ul> <li>\u0414\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f main:</li> </ul> <pre><code>urlpatterns = [\n    path('', table, name='table'),\n    path('upload/', upload, name='upload'),\n    path('grades/', grades, name='grades'),\n]\n</code></pre> <ul> <li>\u0414\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f accounts:</li> </ul> <pre><code>urlpatterns = [\n    path('login/', login, name='login'),\n    path('register/', register, name='register'),\n    path('logout/', logout, name='logout'),\n]\n</code></pre>"},{"location":"report_2/#view","title":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c view:","text":"<ul> <li>\u0414\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f accounts:</li> </ul> <pre><code>from django.shortcuts import render, redirect\nfrom django.contrib.auth import login as _login, logout as _logout\nfrom django.contrib.auth.hashers import make_password\nfrom .forms import UserRegisterForm, UserLoginForm\n\ndef register(request):\n    if request.method == \"POST\":\n        form = UserRegisterForm(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)  # Don't save yet, we need to hash the password\n            user.password = make_password(form.cleaned_data['password'])\n            user.save()\n            _login(request, user)\n            return redirect(\"/\")\n    else:\n        if str(request.user) != \"AnonymousUser\": return redirect(\"/\")\n        form = UserRegisterForm()\n    return render(request, 'register.html', {'form': form})\n\ndef login(request):\n    if request.method == \"POST\":\n        form = UserLoginForm(data=request.POST)\n        if form.is_valid():\n            _login(request, form.get_user())\n            return redirect(\"/\")\n    else:\n        if str(request.user) != \"AnonymousUser\": return redirect(\"/\")\n        form = UserLoginForm()\n    return render(request, 'login.html', {'form': form})\n\ndef logout(request):\n    _logout(request)\n    return redirect('/accounts/login')\n</code></pre> <ul> <li>\u0414\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f main:</li> </ul> <pre><code>import json\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.decorators.http import require_POST\nfrom django.http import JsonResponse\nfrom collections import defaultdict\nfrom accounts.models import *\nfrom .models import *\n\n@login_required\ndef table(request):\n    if request.user.user_type != \"student\":\n        user = get_object_or_404(User, username=request.user.username)\n        return redirect(\"/admin\")\n    else:\n        user = get_object_or_404(User, username=request.user.username)\n\n        subjects = Subject.objects.filter(classname=user.classname)\n\n        selected_subject_id : int = request.GET.get('subject_id')\n        selected_subject = None\n        assignments = []\n\n        if selected_subject_id:\n            try:\n                selected_subject = subjects.filter(id=selected_subject_id)[0]\n                assignments = Assignment.objects.filter(subject=selected_subject).order_by('-date_of_issue')\n                solutions = Solution.objects.filter(assignment__subject=selected_subject, student=user)    \n\n                solutions_dict = {sol.assignment_id: sol for sol in solutions}\n\n                for assignment in assignments:\n                    solution = solutions_dict.get(assignment.id)\n                    assignment.link_to_file = solution.link_to_file if solution else None\n                    assignment.grade = solution.grade if solution else None\n\n            except Subject.DoesNotExist:\n                pass\n\n        context = {\n            'user': user,\n            'subjects': subjects,\n            'selected_subject': selected_subject,\n            'assignments': assignments,\n        }\n\n        return render(request, 'table.html', context)\n\n@login_required\n@require_POST\ndef upload(request):\n    try:\n        data = json.loads(request.body)\n        assignment_id = data.get('assignment_id')\n        subject_id = data.get('subject_id')\n        file_url = data.get('file_url')\n\n        assignment = Assignment.objects.get(id=assignment_id, subject_id=subject_id)\n        Solution.objects.create(assignment=assignment,student=request.user,link_to_file=file_url)\n\n        return JsonResponse({\n            'success': True,\n            'message': '\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043e'\n        })\n\n    except Assignment.DoesNotExist:\n        return JsonResponse({\n            'success': False,\n            'error': '\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e'\n        }, status=404)\n    except Exception as e:\n        return JsonResponse({\n            'success': False,\n            'error': str(e)\n        }, status=500)\n\n@login_required\ndef grades(request):\n    if request.user.user_type != \"student\":\n        user = get_object_or_404(User, username=request.user.username)\n        return redirect(\"/admin\")\n    else:\n        #data = json.loads(request.body)\n        user = get_object_or_404(User, username=request.user.username)\n        subjects = Subject.objects.filter(classname=user.classname)\n        selected_subject_id : int = request.GET.get('subject_id')\n        subject = Subject.objects.get(id=selected_subject_id)\n\n        students = User.objects.filter(classname=user.classname, is_staff=False).order_by('full_name')\n\n        assignments = Assignment.objects.filter(subject=subject).order_by('date_of_issue')\n\n        solutions = Solution.objects.filter(assignment__in=assignments, student__in=students).select_related('assignment', 'student')\n        student_grades = defaultdict(dict)\n        for solution in solutions:\n            student_grades[solution.student_id][solution.assignment_id] = {\n                'grade': None if solution.grade is None else int(solution.grade),\n                'link_to_file': solution.link_to_file\n            }\n\n        grades_data = []\n        for student in students:\n            student_row = {\n                'student': student,\n                'grades': []\n            }\n            for assignment in assignments:\n                grade_info = student_grades[student.id].get(assignment.id)\n                student_row['grades'].append(grade_info)\n            grades_data.append(student_row)\n\n        context = {\n            'user': user,\n            'subjects': subjects,\n            'selected_subject': subject,\n            'students': students,\n            'assignments': assignments,\n            'grades_data': grades_data,\n        }\n\n        return render(request, 'grades.html', context)\n\n</code></pre>"},{"location":"report_2/#_3","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:","text":"<ul> <li>\u0414\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f accounts:</li> </ul> <pre><code>from django.db import models\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom main.base_models import *\n\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, username, password=None, **extra_fields):\n        user = self.model(username=username, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, username, password=None, **extra_fields):\n        extra_fields.setdefault('user_type', 'admin')\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n        return self.create_user(username, password, **extra_fields)\n\nclass User(AbstractBaseUser, PermissionsMixin):\n    USER_TYPES = (\n        ('student', '\u0423\u0447\u0435\u043d\u0438\u043a'),\n        ('teacher', '\u0423\u0447\u0438\u0442\u0435\u043b\u044c'),\n        ('admin', '\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440'),\n    )\n    classname = models.ForeignKey(Class, on_delete=models.DO_NOTHING, null=True, blank=True)\n    user_type = models.CharField(max_length=10, choices=USER_TYPES, default='student')\n    username = models.CharField(max_length=32, unique=True, db_index=True)\n    full_name = models.CharField(max_length=64)\n    password = models.CharField(max_length=128)\n    is_staff = models.BooleanField(default=False)\n    REQUIRED_FIELDS = ['password']\n    USERNAME_FIELD = 'username'\n    objects = CustomUserManager()\n\n    def __str__(self):\n        return self.username\n</code></pre> <ul> <li>\u0414\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f main:</li> </ul> <pre><code>from django.db import models\nfrom .base_models import *\nfrom accounts.models import *\n\nclass Subject(models.Model):\n    teacher = models.ForeignKey(User, on_delete=models.CASCADE)\n    classname = models.ForeignKey(Class, on_delete=models.CASCADE)\n    name = models.CharField(max_length=32)\n    def __str__(self):\n        return self.name\n\nclass Assignment(models.Model):\n    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)\n    name = models.CharField(max_length=64)\n    text = models.CharField(max_length=256)\n    penalty_info = models.CharField(max_length=128)\n    date_of_issue = models.DateTimeField()\n    end_date = models.DateTimeField()\n    def __str__(self):\n        return self.name[:16]\n\nclass Solution(models.Model):\n    assignment = models.ForeignKey(Assignment, on_delete=models.CASCADE)\n    student = models.ForeignKey(User, on_delete=models.CASCADE)\n    grade = models.IntegerField(null=True, blank=True)\n    link_to_file = models.CharField(max_length=128, null=True, blank=True)\n</code></pre>"}]}